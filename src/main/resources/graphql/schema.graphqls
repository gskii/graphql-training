schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    linkById(id: ID): Link
    allLinks(filter: LinkFilter, skip: Int = 0, first: Int = 0): [Link]
}

type Mutation {
    createLink(url: String!, description: String!): Link
    createUser(name: String!, authProvider: AuthData!): User
    signInUser(auth: AuthData): SignInPayload
    createVote(linkId: ID, userId: ID): Vote
}

type Subscription {
    newLink: Link
}

type Link {
    id: ID!
    url: String!
    description: String!
    postedBy: User
}

type User {
    id: ID!
    name: String!
    email: String
    password: String
}

input AuthData {
    email: String!
    password: String!
}

type SignInPayload {
    token: String
    user: User
}

type Vote {
    id: ID!
    createdAt: DateTime!
    user: User!
    link: Link!
}

scalar DateTime

input LinkFilter {
    descriptionContains: String
    urlContains: String
}